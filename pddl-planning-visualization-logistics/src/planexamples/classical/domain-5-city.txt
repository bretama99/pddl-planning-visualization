(define (domain logistics)
  (:requirements :strips :typing)
  
  (:types
    city location - object
    airport - location
    package vehicle - object
    truck airplane - vehicle
  )
  
  (:predicates
    (in-city ?loc - location ?c - city)
    (at ?obj - object ?loc - object)
    (in ?pkg - package ?veh - vehicle)
  )
  
  (:action drive
    :parameters (?truck - truck ?from - location ?to - location ?city - city)
    :precondition (and
                   (at ?truck ?from)
                   (in-city ?from ?city)
                   (in-city ?to ?city)
                   (not (= ?from ?to)))
    :effect (and
              (not (at ?truck ?from))
              (at ?truck ?to))
  )
  
  (:action load-truck
    :parameters (?pkg - package ?truck - truck ?loc - location ?city - city)
    :precondition (and
                   (at ?pkg ?loc)
                   (at ?truck ?loc)
                   (in-city ?loc ?city))
    :effect (and
              (not (at ?pkg ?loc))
              (in ?pkg ?truck))
  )
  
  (:action unload-truck
    :parameters (?pkg - package ?truck - truck ?loc - location ?city - city)
    :precondition (and
                   (in ?pkg ?truck)
                   (at ?truck ?loc)
                   (in-city ?loc ?city))
    :effect (and
              (not (in ?pkg ?truck))
              (at ?pkg ?loc))
  )
  
  (:action fly
    :parameters (?plane - airplane ?from - airport ?to - airport ?city1 - city ?city2 - city)
    :precondition (and
                   (at ?plane ?from)
                   (in-city ?from ?city1)
                   (in-city ?to ?city2)
                   (not (= ?city1 ?city2)))
    :effect (and
              (not (at ?plane ?from))
              (at ?plane ?to))
  )
  
  (:action load-airplane
    :parameters (?pkg - package ?plane - airplane ?airport - airport ?city - city)
    :precondition (and
                   (at ?pkg ?airport)
                   (at ?plane ?airport)
                   (in-city ?airport ?city))
    :effect (and
              (not (at ?pkg ?airport))
              (in ?pkg ?plane))
  )
  
  (:action unload-airplane
    :parameters (?pkg - package ?plane - airplane ?airport - airport ?city - city)
    :precondition (and
                   (in ?pkg ?plane)
                   (at ?plane ?airport)
                   (in-city ?airport ?city))
    :effect (and
              (not (in ?pkg ?plane))
              (at ?pkg ?airport))
  )
)